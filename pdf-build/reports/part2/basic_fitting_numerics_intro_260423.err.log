Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/conda/lib/python3.9/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/conda/lib/python3.9/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/opt/conda/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/conda/lib/python3.9/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
data.data[key][dataType].attrs['harmonics'] = {'stackDim':'ADM'}

# Standard case:
# {'dtype': 'Complex harmonics', 'kind': 'complex', 'normType': 'ortho', 'csPhase': True, 'keyDims': {'LM': ['l', 'm']}, 'LMStackFlag': True, 'stackDim': 'LM', 'dimList': ['l', 'm'], 'lDim': 'l', 'mDim': 'm'}

# The ADMplot routine will show a basic line plot, note it needs keys = 'ADM' in the current implementation (otherwise will loop over all keys)
data.ADMplot(keys = 'ADM', backend = 'hv')  #, returnPlot=True, renderPlot=False)

# THIS CURRENTLY FAILS
# hvDS = hvPlotters.hv.Dataset(xrDS.unstack(xrDS.attrs['harmonics']['stackDim']))
# NEED TO SET stackDims correctly for ADMs!
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_115963/1552123943.py[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0;31m# The ADMplot routine will show a basic line plot, note it needs keys = 'ADM' in the current implementation (otherwise will loop over all keys)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0mdata[0m[0;34m.[0m[0mADMplot[0m[0;34m([0m[0mkeys[0m [0;34m=[0m [0;34m'ADM'[0m[0;34m,[0m [0mbackend[0m [0;34m=[0m [0;34m'hv'[0m[0;34m)[0m  [0;31m#, returnPlot=True, renderPlot=False)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0;34m[0m[0m
[1;32m      9[0m [0;31m# THIS CURRENTLY FAILS[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/conda/lib/python3.9/site-packages/epsproc/classes/_plotters.py[0m in [0;36mADMplot[0;34m(self, dataType, xDim, Etype, col, **kwargs)[0m
[1;32m    419[0m [0;34m[0m[0m
[1;32m    420[0m     [0;31m# Pass explicitly[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 421[0;31m     [0mself[0m[0;34m.[0m[0mBLMplot[0m[0;34m([0m[0mdataType[0m [0;34m=[0m [0mdataType[0m[0;34m,[0m [0mxDim[0m [0;34m=[0m [0mxDim[0m[0;34m,[0m [0mEtype[0m [0;34m=[0m [0mEtype[0m[0;34m,[0m [0mcol[0m [0;34m=[0m [0mcol[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    422[0m [0;34m[0m[0m
[1;32m    423[0m [0;34m[0m[0m

[0;32m/opt/conda/lib/python3.9/site-packages/epsproc/classes/_plotters.py[0m in [0;36mBLMplot[0;34m(self, Erange, Etype, dataType, xDim, selDims, col, row, thres, keys, verbose, backend, overlay, XS, **kwargs)[0m
[1;32m    456[0m     [0;32mif[0m [0mbackend[0m [0;34m==[0m [0;34m'hv'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    457[0m         [0;31m# self._hvBLMplot(**locals())[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 458[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_hvBLMplot[0m[0;34m([0m[0;34m**[0m[0;34m{[0m[0mk[0m[0;34m:[0m[0mv[0m [0;32mfor[0m [0mk[0m[0;34m,[0m[0mv[0m [0;32min[0m [0mlocals[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mitems[0m[0;34m([0m[0;34m)[0m [0;32mif[0m [0mk[0m [0;32mnot[0m [0;32min[0m [0;34m[[0m[0;34m'self'[0m[0;34m,[0m[0;34m'kwargs'[0m[0;34m][0m[0;34m}[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    459[0m [0;34m[0m[0m
[1;32m    460[0m     [0;31m# Set xDim if not passed.[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/conda/lib/python3.9/site-packages/epsproc/classes/_plotters.py[0m in [0;36m_hvBLMplot[0;34m(self, Erange, Etype, dataType, xDim, selDims, col, row, thres, keys, verbose, backend, overlay, keyDim, XS, pType, renderPlot, returnPlot, **kwargs)[0m
[1;32m    662[0m [0;34m[0m[0m
[1;32m    663[0m     [0;31m#*** Holoviews init[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 664[0;31m     [0mhvDS[0m [0;34m=[0m [0mhvPlotters[0m[0;34m.[0m[0mhv[0m[0;34m.[0m[0mDataset[0m[0;34m([0m[0mxrDS[0m[0;34m.[0m[0munstack[0m[0;34m([0m[0mxrDS[0m[0;34m.[0m[0mattrs[0m[0;34m[[0m[0;34m'harmonics'[0m[0;34m][0m[0;34m[[0m[0;34m'stackDim'[0m[0;34m][0m[0;34m)[0m[0;34m)[0m  [0;31m# Need to unstack, otherwise sometimes get empty plots?[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    665[0m                                                                                       [0;31m# Seems to be issue with tuple/MultiIndex case.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    666[0m [0;34m[0m[0m

[0;32m/opt/conda/lib/python3.9/site-packages/xarray/core/dataarray.py[0m in [0;36munstack[0;34m(self, dim, fill_value, sparse)[0m
[1;32m   2199[0m         [0mDataArray[0m[0;34m.[0m[0mstack[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2200[0m         """
[0;32m-> 2201[0;31m         [0mds[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_to_temp_dataset[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0munstack[0m[0;34m([0m[0mdim[0m[0;34m,[0m [0mfill_value[0m[0;34m,[0m [0msparse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2202[0m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_from_temp_dataset[0m[0;34m([0m[0mds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2203[0m [0;34m[0m[0m

[0;32m/opt/conda/lib/python3.9/site-packages/xarray/core/dataset.py[0m in [0;36munstack[0;34m(self, dim, fill_value, sparse)[0m
[1;32m   4168[0m             [0mmissing_dims[0m [0;34m=[0m [0;34m[[0m[0md[0m [0;32mfor[0m [0md[0m [0;32min[0m [0mdims[0m [0;32mif[0m [0md[0m [0;32mnot[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mdims[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m   4169[0m             [0;32mif[0m [0mmissing_dims[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 4170[0;31m                 raise ValueError(
[0m[1;32m   4171[0m                     [0;34mf"Dataset does not contain the dimensions: {missing_dims}"[0m[0;34m[0m[0;34m[0m[0m
[1;32m   4172[0m                 )

[0;31mValueError[0m: Dataset does not contain the dimensions: ['LM']
ValueError: Dataset does not contain the dimensions: ['LM']

